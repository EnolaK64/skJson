{
  "events": [
    {
      "id": "json_watcher_save",
      "name": "Json watcher save",
      "description": [
        "will only run when the json watcher notices a change in the file"
      ],
      "examples": [
        "on json watcher save"
      ],
      "since": [
        "2.9"
      ],
      "patterns": [
        "[json-] watcher save"
      ],
      "event values": [
        "event-json",
        "event-object",
        "event-object"
      ],
      "cancellable": false
    }
  ],
  "conditions": [
    {
      "id": "CondFileExists",
      "name": "Json file exists",
      "description": [
        "You can check if the json file already exists or not."
      ],
      "examples": [
        "command FileExists:",
        "\ttrigger",
        "\t\tset {_json} to json from string \"{'A': [{'B': {}}, false, true, 10, 20, 22.22, 'A']}\" if json file \"plugins/test/main.json\" already exists"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "[skJson] json [file] %string% exists",
        "[skJson] json [file] %string% does(n't| not) exist"
      ]
    },
    {
      "id": "CondJsonIsCached",
      "name": "Json file is cached",
      "description": [
        "Check if the file for given id is cached"
      ],
      "examples": [
        "on load:",
        "\tsend true if json \"test\" is linked "
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "[skJson] json %string% is (load|linked)",
        "[skJson] json %string% is(n't| not) (load|linked)"
      ]
    },
    {
      "id": "CondJsonIsListened",
      "name": "Json file is listening",
      "description": [
        "Check if the file for given id is listening via JsonWatcher"
      ],
      "examples": [
        "on load:",
        "\tif json \"test\" is listen:",
        "\t\tsend true"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "json %string% is listen",
        "json %string% is(n't| not) listen"
      ]
    },
    {
      "id": "CondJsonHas",
      "name": "Json has value/keys",
      "description": [
        "You can check if the inserted keys or values already in your specified json"
      ],
      "examples": [
        "on script load:",
        "\tset {_json} to json from string \"{'test5': [1], 'test6': ['key', 'key2', 'key3']}\"",
        "\tif {_json} has keys \"test5\", \"test6\", \"A\":",
        "\t\tsend true"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "[skJson] %json% has [:directly] (:value|:key)[s] %objects%",
        "[skJson] %json% does(n't| not) have [:directly] (:value|:key)[s] %objects%"
      ]
    },
    {
      "id": "CondJsonEmpty",
      "name": "Json is empty",
      "description": [
        "You can check if the json empty"
      ],
      "examples": [
        "Command jsonIsEmpty",
        "\ttrigger",
        "\t\tset {_json} to json from text \"{}\"",
        "\t\tsend true if json element {_json} is empty"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "[skJson] json(-| )element %json% is empty",
        "[skJson] json(-| )element %json% is(n't| not) empty"
      ]
    },
    {
      "id": "CondJsonType",
      "name": "Type of Json",
      "description": [
        "You can get type of given Json."
      ],
      "examples": [
        "set {_j} to json from \"{data: {}}\"",
        "if type of {_j} is json object"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "[skJson] type of %json% (is|=) (1:primitive|2:json object|3:json array)",
        "[skJson] type of %json% (is(n't| not)|!=) (1:primitive|2:json object|3:json array)"
      ]
    }
  ],
  "effects": [
    {
      "id": "Edit",
      "name": "Change json file contents",
      "description": [
        "Its allow to change directly keys/values in the given json file"
      ],
      "examples": [
        "on script load:",
        "\tnew json file \"plugins\\SkJson\\jsons\\test.json\"",
        "",
        "command edit:",
        "\ttrigger:",
        "edit value \"command\" of json file \"plugins/SkJson/jsons/test.json\" to player's tool"
      ],
      "since": [
        "2.8.5"
      ],
      "patterns": [
        "[skJson] edit (0:value|1:key) %string% of json file %string% to %object%"
      ]
    },
    {
      "id": "JsonNonFileStorage",
      "name": "Json storage",
      "description": [
        "You can create virtual json in memory"
      ],
      "examples": [
        "on script load:",
        "\tcreate new json storage named \"json-storage\"",
        "\tsend json \"json-storage\""
      ],
      "since": [
        "2.9"
      ],
      "patterns": [
        "[skJson] [create] new json storage [named] %string%"
      ]
    },
    {
      "id": "MapJson",
      "name": "Json to Skript variable list",
      "description": [
        "Its allow convert Json to variable skript list"
      ],
      "examples": [
        "on script load:",
        "\tset {_json} to json from file \"plugins/skript/#.json\"",
        "\tmap {_json} to {_json::*}"
      ],
      "since": [
        "1.9, 2.9 - Support mapping json from functions"
      ],
      "patterns": [
        "[skJson] [:async] (map|copy) %json/string% to %objects%"
      ]
    },
    {
      "id": "MakeStopListen",
      "name": "JsonWatcher - Start/Stop listening to file",
      "description": [
        "You can register listener for json file, and while the file is updated the cache for this file will be also so."
      ],
      "examples": [
        "on script load",
        "\tmake json watcher listen to \"mine.id\"",
        "\tstop json watcher listen to \"mine.id\""
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "(:make|:stop) [json] watcher listen to %string%"
      ]
    },
    {
      "id": "LinkFile",
      "name": "Link json file with defined cache.",
      "description": [
        "You can works with the cache instead of reopening the file again & again."
      ],
      "examples": [
        "on load:",
        "\tlink json file \"<path to file>\" as \"mine.id\"",
        "\tlink json file \"<path to file>\" as \"mine.id\" and make json watcher listen"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "[skJson] link [json] file %string% as %string% [(:and make) [[json] watcher] listen]"
      ]
    },
    {
      "id": "New",
      "name": "New json file with-out content",
      "examples": [
        "on script load:",
        "\tnew json file \"plugins\\SkJson\\test.json\"",
        "",
        "\tset {_json} to json from website \"https://raw.githubusercontent.com/mozilla/node-convict/master/lerna.json\"",
        "\tnew json file \"plugins\\SkJson\\test.json\" with content {_json}"
      ],
      "since": [
        "2.6.2"
      ],
      "patterns": [
        "[skJson] new json file %string% [(:with) content %object%]"
      ]
    },
    {
      "id": "SaveCache",
      "name": "Save cached json to file",
      "description": [
        "It's allow save cached json back to the file"
      ],
      "examples": [
        "on unload:",
        "\tsave json \"test\"",
        "\tsave all jsons"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "[skJson] save json %string%",
        "[skJson] save all jsons"
      ]
    },
    {
      "id": "EffSendRequest",
      "name": "Send created/prepared request",
      "description": [
        "Send prepared/created request to the given method and uri"
      ],
      "examples": [
        "send prepared {_request}"
      ],
      "since": [
        "2.9.9-pre Api Changes"
      ],
      "patterns": [
        "[skJson] send [prepared] %request%"
      ]
    },
    {
      "id": "UnlinkFile",
      "name": "Unlink or unload json file from cache",
      "description": [
        "You can unload the json file."
      ],
      "examples": [
        "on load:",
        "\tunlink json \"mine.id\""
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "[skJson] unlink json %string%"
      ]
    },
    {
      "id": "Write",
      "name": "Write content to json file",
      "description": [
        "Write new data directly to json file (File will be rewritten!"
      ],
      "examples": [
        "on script load:",
        "\tnew json file \"plugins\\SkJson\\jsons\\test.json\"",
        "",
        "command write:",
        "\ttrigger:",
        "write json from website \"api-website\" to json file \"plugins/SkJson/jsons/test.json\""
      ],
      "since": [
        "2.8.5"
      ],
      "patterns": [
        "[skJson] write %object% to json file %string%"
      ]
    },
    {
      "id": "AllJsonFromDirectory",
      "name": "link and load all json files from given folder",
      "description": [
        "Handle all files from folder"
      ],
      "examples": [
        "load json files from \"plugins/raw/\" and save it in \"raw\"",
        "\tloop values of json \"raw\":",
        "\t\tsend json-value",
        "*Since 2.9 [30.8.2023]*",
        "",
        "load json files from \"plugins/SkJson/jsons\" and let json watcher listen to all with save in \"raw\"",
        "\tloop values of json \"raw\":",
        "\t\tsend json-value"
      ],
      "since": [
        "2.9 [30.8.2023] - add support for json watcher to all files"
      ],
      "patterns": [
        "[skJson] [:async] load json files from %string% and save it in %string%",
        "[skJson] [:async] load json files from %string% and let json watcher listen to all with save it in %string%"
      ]
    }
  ],
  "expressions": [
    {
      "id": "AllJsonInFolder",
      "name": "All json files in directory",
      "description": [
        "You can get multiple file from directory and load that as json"
      ],
      "examples": [
        "on script load:",
        "\tset {_jsons::*} to all json file from dir \"./plugins/test\"",
        "\t#Or you can loop trough that",
        "\tloop all json file from dir \"./plugins/test\":",
        "\t\tsend loop-file",
        "\t\tsend json from file loop-file"
      ],
      "since": [
        "2.9.7"
      ],
      "return type": "Text",
      "patterns": [
        "[skJson] All json [files] (from|in) (dir|directory|folder) %string%"
      ]
    },
    {
      "id": "JsonArrayChanger",
      "name": "Changer - JsonArray set/add/remove/removeAll",
      "description": [
        "The new documentation you will find here: https://skjsonteam.github.io/skJsonDocs/beta/defaults",
        "A very general effect that can change many json array. The json object can be only add/set/remove/removeAll"
      ],
      "examples": [
        "set value of json list \"1::list[1]::data\" in {_json} to \"[]\"",
        "remove values 1 and \"Hello true\" of json list from {_json}",
        "remove 2nd element of json list from {_json}",
        "add diamond sword to json list \"0::list\" in {_json}",
        "remove all \"new test key\" of json list \"array[0]\" from {_json}"
      ],
      "since": [
        "2.9"
      ],
      "return type": "Object",
      "changers": [
        "add",
        "set"
      ],
      "patterns": [
        "[skJson] json (list|array) [%string%] in %jsons%",
        "[skJson] (1:value|2:key) of json (list|array) %string% in %json%",
        "[skJson] [value[s]] %objects% of json (list|array) [%string%]",
        "[skJson] (1:(1st|first)|2:(2nd|second)|3:(3rd|third)|4:last|5:%integer%) element of json (list|array) [%string%]"
      ]
    },
    {
      "id": "JsonObjectChanger",
      "name": "Changer - JsonObject set/remove/removeAll",
      "description": [
        "The new documentation you will find here: https://skjsonteam.github.io/skJsonDocs/beta/defaults",
        "A very general effect that can change many json object. The json object can be only set/remove/removeAll"
      ],
      "examples": [
        "set value of json object \"data::key\" in {_json} to \"new test key\"",
        "set key of json object \"data::key\" in {_json} to \"test key\"",
        "set key of json object \"list\" in {_json} to \"array\"",
        "set value of json object \"this-a test-what i need to <>-_::data\" in {_json} to iron sword",
        "remove value \"test key\" of json object \"data\" from {_json}",
        "remove all \"new test key\" of json object \"data\" from {_json}"
      ],
      "since": [
        "2.9"
      ],
      "return type": "Object",
      "changers": [
        "set"
      ],
      "patterns": [
        "[skJson] (:key|:value)[2:s] of json object %string% in %json%",
        "[skJson] [by] (:key|:value)[s] %objects% of json object [%string%]",
        "[skJson] %objects% of json (object|array|list) [%string%]"
      ]
    },
    {
      "id": "CountElements",
      "name": "Count values/elements in the Json.",
      "description": [
        "You can get the number of values or keys in the given json",
        "",
        "**Explanatory notes**:",
        "\t > `<json>`: represent a placeholder for your json e.g. `{_json}`"
      ],
      "examples": [
        "number of keys \"test\" and \"something\" in <json>",
        "number of key \"test\" in <json>"
      ],
      "since": [
        "2.9.9-pre (Api change)"
      ],
      "return type": "integer",
      "patterns": [
        "[skJson] number of (0:key[s]|1:value[s]) %objects% in %json%"
      ]
    },
    {
      "id": "GetCachedJson",
      "name": "Get cached json",
      "description": [
        "You can get json from cache storage by key defined by you"
      ],
      "examples": [
        "on script load:",
        "\tset {_json} to json \"your\"",
        "\tsend {_json} with pretty print"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "return type": "json",
      "changers": [
        "remove",
        "remove all",
        "reset"
      ],
      "patterns": [
        "[skJson] json %string%",
        "[skJson] all cached jsons"
      ]
    },
    {
      "id": "IndexListObject",
      "name": "Get index of key/value in ListObject",
      "description": [
        "Returns the index of the key/value in the ListObject",
        "What is ListObject? ListObject is shortcut for `[{}, {} ...]`",
        "That means the object indexed by integer in the list",
        "This expressions allows you found the value in the inner objects in the list."
      ],
      "since": [
        "2.9"
      ],
      "return type": "integer",
      "patterns": [
        "[skJson] index of value %object% in [object( |-)list] [%string%] of [json] %json%"
      ]
    },
    {
      "id": "JsonSupportElement",
      "name": "Literals",
      "description": [
        "Represent sort of literals for skJson"
      ],
      "examples": [
        "on script load:",
        "\tset {_json} to json from location(10,1,1)",
        "\tsend first element of {_json}",
        "\tsend last element of {_json}",
        "\tsend 5 element of {_json}",
        "\tsend 3rd element of {_json}",
        ""
      ],
      "since": [
        "2.9"
      ],
      "return type": "Object",
      "patterns": [
        "[skJson] (1:(1st|first)|2:(2nd|second)|3:(3rd|third)|4:last|5:%integer%) element of %jsons%"
      ]
    },
    {
      "id": "LoopExpression",
      "name": "Loops",
      "description": [
        "        That will allow loop through json, and get key/index or value\n        **json-value**, **json-key**\n"
      ],
      "examples": [
        "    on script load:\n        set {_json} to json from \"{'key': 'value', 'array': [1, 2, 3, false, 'index/value']}\n        loop values \"array\" of {_json}:\n            send json-value # 1, 2, 3, false, index/value\n            send json-key # 1, 2, 3, 4, 5\n\n        loop values of {_json}:\n            send json-value # value, [1, 2, 3, false, \"index/value\"]\n            send json-key # 1, 2\n"
      ],
      "since": [
        "2.9"
      ],
      "return type": "Object",
      "patterns": [
        "[skJson] [the] json-(:value|:key)[-<(\\d+)>]"
      ]
    },
    {
      "id": "NewJsonExpression",
      "name": "New json",
      "description": [
        "latest:",
        "\t\t- support now also multiple items as input",
        "\t\t- support json content from webpage",
        "\t\t- removed empty json array/object, cause it's not necessary while",
        "skJson know parsing object",
        "original docs: https://skjsonteam.github.io/skJsonDocs/exprs#new-json",
        "skripthub docs:",
        "<br />",
        "It's allow create json from any source also from the file"
      ],
      "examples": [
        "on script load:",
        "\tset {_json} to json from json file \"plugins/Skript/json-storage/database.json\"",
        "\tset {_json::*} to json from \"{'test' :true}\", \"B\"",
        "\tset {_json} to json from diamond tools",
        "\tset {_json} to json from player's location",
        "\tset {_json} to json from player's inventory",
        "\tset {_json} to json from yaml file <path>",
        "\tset {_json} to json from website file \"https://json.org/sample.json\"",
        "*Literal",
        "set {_json} to @{\"test\": true, \"var\": {_test}}"
      ],
      "since": [
        "2.9, 2.9.3 - Literal parsing"
      ],
      "return type": "json",
      "changers": [
        "remove",
        "remove all",
        "reset"
      ],
      "patterns": [
        "[skJson] json from [1:(text|string)|2:([json]|:yaml) file|3:web[site] [file]] [object] %objects%",
        "[skJson] @<^(\\{|\\[).+(\\}|\\])$>"
      ]
    },
    {
      "id": "ExprPrepareRequest",
      "name": "Prepare Web request",
      "description": [
        "allowed methods are [GET, POST, PUT, HEAD, MOCK, DELETE, PATCH]",
        "allowed value type of content is Json or stringify json (Json as String) e.g. \"{\"\"Test\"\": true}\"",
        "allowed value type of header is Json or (Pairs e.g. \"Content-Type: application/Json\", \"Allow: restrict\")",
        "",
        "You can execute the request by 'send prepared {_request}', otherwise the request will be not sent, but the request will be still stored",
        "And you can get response status/content/headers like in the examples"
      ],
      "examples": [
        "    set {_request} to prepare new GET request on \"https://raw.githubusercontent.com/SkJsonTeam/skJson/main/skjson.jsonn\"\n    set {_request}'s request content to @{\"A\": true}\n    set {_request}'s headers to @{\"Content-Type\": \"application/json+vhd\"}\n    send prepared {_request}\n\n    if response status is \"OK\":\n        send response status code of {_request}\n        send response content of {_request}\n        send response status code of {_request}\n        send response headers of {_request}\n"
      ],
      "since": [
        "2.9.9-pre API changes"
      ],
      "return type": "request",
      "patterns": [
        "[skJson] prepare [new] %requestmethod% [request] on %string%"
      ]
    },
    {
      "id": "PrettyPrint",
      "name": "Pretty print",
      "description": [
        "Allows you to better parse json",
        "<pre>",
        "{",
        "\t\"test\": \"skJson\"",
        "\t\"Object\": {",
        "\t\t\"new\": \"data\"",
        "\t}",
        "</pre>"
      ],
      "examples": [
        "set {_json} to json from \"{'test': 'skJson', 'Object' : {'new': 'data'}}\"",
        "send {_json} with pretty print",
        "send {_json} with uncolored pretty print"
      ],
      "since": [
        "2.9"
      ],
      "return type": "Text",
      "patterns": [
        "[skJson] %jsons% with [(:uncoloured|:uncolored)] pretty print"
      ]
    },
    {
      "id": "propExprContent",
      "name": "Request content",
      "description": [
        "set or get the current request content"
      ],
      "examples": [
        "        # getting the Request content;\n        send {_request}'s content\n        send content of {_request}\n\n        # setting the Request content;\n        set {_request}'s content to (json from \"{'Allow': false}\")\n        set content of {_request} to (json from \"{'Allow': false}\")\n"
      ],
      "since": [
        "2.9.9-pre Api Changes"
      ],
      "return type": "json",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] [request] content of %requests%",
        "%requests%'[s] [request] content"
      ]
    },
    {
      "id": "propExprHeader",
      "name": "Request headers",
      "description": [
        "set or get the current request headers"
      ],
      "examples": [
        "        # getting the Request headers;\n        send {_request}'s headers\n        send headers of {_request}\n\n        # setting the Request content;\n        set {_request}'s headers to (json from \"{'Content-Type': 'application/json'}\")\n        set headers of {_request} to (json from \"{'Content-Type': 'application/json'}\")\n\n        #or\n        set {_request}'s headers to \"Content-Type: application/json\", \"Restrict: false\"\n        set headers of {_request} to \"Content-Type: application/json\", \"Restrict: false\"\n"
      ],
      "since": [
        "2.9.9-pre Api Changes"
      ],
      "return type": "json",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] [request] header[s] of %requests%",
        "%requests%'[s] [request] header[s]"
      ]
    },
    {
      "id": "propExprResponseContent",
      "name": "Response content, headers, status code, status",
      "description": [
        "get all response properties"
      ],
      "examples": [
        "        send response status of {_request}\n        send response status code of {_request}\n        send response content of {_request}\n        send response status code of {_request}\n        send response headers of {_request}\n"
      ],
      "since": [
        "2.9.9-pre Api Changes"
      ],
      "return type": "Object",
      "patterns": [
        "[the] response [:content|:headers|:status code|:status] of %requests%",
        "%requests%'[s] response [:content|:headers|:status code|:status]"
      ]
    },
    {
      "id": "JsonSize",
      "name": "Size of json object/array",
      "examples": [
        "set {_json} to json from text \"{'sample': {}, 'second': []}\"",
        "if json size of {_json} > 1:",
        "\tsend {_json} is bigger than 1."
      ],
      "since": [
        "2.9"
      ],
      "return type": "integer",
      "patterns": [
        "[the] json size of %jsons%",
        "%jsons%'[s] json size"
      ]
    },
    {
      "id": "ParseVariable",
      "name": "Skript variable to Json",
      "description": [
        "Its allow convert Skript list variable to Json"
      ],
      "examples": [
        "on script load:",
        "\tset {_json::A::1} to false",
        "\tset {_json::A::2} to true",
        "\tset {_json::B::some} to \"some great value\"",
        "\tsend {_json::*}'s form"
      ],
      "since": [
        "1.3.0"
      ],
      "return type": "json",
      "changers": [
        "remove",
        "remove all",
        "reset"
      ],
      "patterns": [
        "[the] form[atted json] of %jsons%",
        "%jsons%'[s] form[atted json]"
      ]
    },
    {
      "id": "Elements",
      "name": "Values of Json",
      "description": [
        "Values/Key of Json"
      ],
      "examples": [
        "on script load:",
        "\tset {_json} to json from location(10,1,1)",
        "\tsend values of {_json}",
        "\tsend value \"world\" of {_json}",
        "",
        "Checkout <b> Loops </b>"
      ],
      "since": [
        "2.9"
      ],
      "return type": "Object",
      "patterns": [
        "[skJson] (0:(value %string% of %json%)|1:(values [%string%] of %json%))"
      ]
    },
    {
      "id": "EvtFile",
      "name": "Watcher event value-expression File",
      "description": [
        "value-expression for getting file/link from current watcher event"
      ],
      "since": [
        "2.9"
      ],
      "return type": "Object",
      "patterns": [
        "[the] [event-](file|link)"
      ]
    },
    {
      "id": "EvtUUID",
      "name": "Watcher event value-expression UUID",
      "description": [
        "value-expression for getting uuid from current watcher event"
      ],
      "since": [
        "2.9"
      ],
      "return type": "Object",
      "patterns": [
        "[the] [event-](uuid|id)"
      ]
    }
  ],
  "types": [
    {
      "id": "JsonElement",
      "name": "json",
      "description": [
        "JSON representation in skript"
      ],
      "since": [
        "2.9"
      ],
      "patterns": [
        "json"
      ]
    },
    {
      "id": "Webhook",
      "name": "json-webhook",
      "description": [
        "webhooks"
      ],
      "since": [
        "2.9"
      ],
      "patterns": [
        "json-webhook"
      ]
    },
    {
      "id": "Request",
      "name": "request",
      "description": [
        "Representation instance of Request"
      ],
      "since": [
        "2.9.9-pre API changes"
      ],
      "patterns": [
        "request"
      ]
    }
  ],
  "functions": [
    {
      "id": "function_b64",
      "name": "b64",
      "description": [
        "Return base64 encoded string"
      ],
      "examples": [
        "serial: b64(\"This is a test\""
      ],
      "since": [
        "2.9"
      ],
      "return type": "Text",
      "patterns": [
        "b64(object: object)"
      ]
    },
    {
      "id": "function_getDelimiter",
      "name": "getDelimiter",
      "description": [
        "Return a your defined delimiter in the config.yml"
      ],
      "examples": [
        "send \"my delimiter is: %getDelimiter()%\""
      ],
      "since": [
        "2.9"
      ],
      "return type": "Text",
      "patterns": [
        "getDelimiter"
      ]
    },
    {
      "id": "function_string",
      "name": "string",
      "description": [
        "Returns string/json from base64"
      ],
      "examples": [
        "stringify: string(\"dHR0dA==\""
      ],
      "since": [
        "2.9.9-pre"
      ],
      "return type": "Object",
      "patterns": [
        "string(object: object)"
      ]
    }
  ],
  "sections": [
    {
      "id": "WebHookSection",
      "name": "Webhook, send webhook request to Discord/Web",
      "description": [
        "You can handle the discord webhooks via this section.",
        "Can handle also embeds, Request method is PATCH/POST/PUT as always.",
        "You can define the content, headers of each request..",
        "Aso the request shall be sent asynchronous",
        "You can use Json/String, also variables and functions in this section.",
        "! Recommended read that  Discord webhooks api documentation",
        "! Recommended read that  Embed generate webpage \"",
        "! Recommended default json payload  Json Payload (Lorem) "
      ],
      "examples": [
        "command web:\n    trigger:\n        async send web request \"https://webhook.site/4e2e350b-4a8f-4863-85c5-e833e4ec110b\":\n            attachments:\n                1: \"C:\\Users\\nexti\\Documents\\Lekce\\index.html\"\n            content: \"{fromSkJson: '?', ?: true}\"\n\n\ncommand without-embed:\n    trigger:\n        async send discord request \"https://discord.com/api/webhooks/1128075537919770798/y78NK-odks6Lod5kimmhcd9YWQfhFzPU1YA-VyD5bqWMGxaeYXxp5jTxpnNI9Yhw1Rgt\":\n            header: \"Content-Type: application/json\"\n            data:\n                tts: true\n                content: \"{'payload:' true}\" # this can be any json encoded string or json\n\n\ncommand embed:\n    trigger:\n        async send discord request \"https://discord.com/api/webhooks/1128075537919770798/y78NK-odks6Lod5kimmhcd9YWQfhFzPU1YA-VyD5bqWMGxaeYXxp5jTxpnNI9Yhw1Rgt\":\n            header: \"Content-Type: application/json\"\n            data:\n                username: \"AAAA\"\n                avatar-url: \"https://google.com\"\n                tts: true\n                content: \"\" # content never can be empty, so when you want to send only embed, you need to put here empty string\n                embed:\n                    id: 102018 # when you put here null, or auto, the value will be generated automatically.\n                    fields: \"{}\"\n                    author: \"{name: 'CoffeeRequired'}\"\n                    title: \"Hello there\"\n                    thumbnail: \"{url: 'https://cravatar.eu/helmhead/_F0cus__/600.png'}\"\n                    color: \"##21a7c2\" # that support all hex colors.. not minecraft\n\ncommand embedAtt:\n    trigger:\n        async send discord request \"https://discord.com/api/webhooks/1128075537919770798/y78NK-odks6Lod5kimmhcd9YWQfhFzPU1YA-VyD5bqWMGxaeYXxp5jTxpnNI9Yhw1Rgt\":\n            attachments:\n                1: \"*/generate_doc.sk\" # star means the parser will search for the file recursively from the root directory\n            data:\n                tts: false\n                content: \"hello from attachments\"\n"
      ],
      "since": [
        "2.9"
      ],
      "patterns": [
        "[skJson] [:async] send (:web|:discord) request %string%"
      ]
    }
  ]
}