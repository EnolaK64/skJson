import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'cz.coffee'
version = '2.0.2'

shadowJar {
    relocate ('com.google.gson', 'cz.coffee.skriptgson.gson')
    mergeServiceFiles()
}

tasks.register('relocateShadowJar') {
    ShadowJar target = tasks.shadowJar as ShadowJar
}

static configureRelocations(ShadowJar task) {
    task.relocate('com.google.gson', 'cz.coffee.skriptgson.google.gson')
}

tasks.withType(ShadowJar).configureEach {
    dependsOn relocateShadowJar
    configurations = [
            project.configurations.shadow
    ]
    relocate 'com.google.gson', 'cz.coffee.skriptgson.google.gson'
    manifest {
        attributes(
                'Name': 'cz/coffee/skriptgson',
                'Automatic-Module-Name': 'cz.coffee.skriptgson',
                'Sealed': 'true'
        )
    }
    configureRelocations(it)
}

compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = 'papermc-repo'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        url 'https://repo.skriptlang.org/releases'
    }
    maven {
        url 'https://mvnrepository.com/artifact/com.google.code.gson/gson'
    }
    maven {
        url 'https://mvnrepository.com/artifact/org.eclipse.jdt/org.eclipse.jdt.annotation'
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.24'
    compileOnly 'org.jetbrains:annotations:23.0.0'
    compileOnly 'io.papermc.paper:paper-api:1.19.2-R0.1-SNAPSHOT'
    compileOnly 'com.github.SkriptLang:Skript:2.6.3'
    shadow('com.google.code.gson:gson:2.10')
    implementation group: 'org.eclipse.jdt', name: 'org.eclipse.jdt.annotation', version: '2.2.700'
}



tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ["-source", "16", "-target", "16"]
}


tasks.register('clearOldVersion', Delete) {
    ['A:/plugins/sk-gson/', 'A:/Bukkit-Core/purpur/dev-latest/plugins', 'A:/workspaces/latest//plugins'].each {
        path ->
            {
                def treeOfPaths = fileTree(path)
                treeOfPaths.include '**/skript-gson*.jar'
                treeOfPaths.each { fileObject -> delete(fileObject) }
            }
    }
}

tasks.register('release', Copy) {
    dependsOn([build, reload])
    [
            'A:/plugins/sk-gson/',
            'A:/Bukkit-Core/purpur/dev-latest/plugins',
            'A:/workspaces/latest//plugins'].each { destination ->
        copy {
            from shadowJar
            into destination
        }
    }
}

tasks.register('server', Exec) {
    commandLine 'cmd', '/c', 'start powershell A:\\psScripts\\build.ps1 "startServer"'
    return 1
}

tasks.register('reload', Exec) {
    commandLine 'cmd', '/c', 'start powershell A:\\psScripts\\build.ps1 "reload"'
    return 1
}

tasks.register('reload_plus', Exec) {
    commandLine 'cmd', '/c', 'start powershell A:\\psScripts\\build.ps1 "reload_+"'
    return 1
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}