# SkJson configuration file

settings:
  # Never change it!
  version: 1.3

  # Enable this if you would like to see more verbose debug messages
  debug: false

  # Enable this if you would like use a test command /skjson run-tests
  test-allowed: false

  # Change to more than 1 if you have any addons/plugins that slow down the start..
  # 0 = 500s, 1 = 10s, 2 = 25s, 3 = 40s, test delay
  startup-tests-delay: 0

  # Enabled this if you would get a tests result each time when server starts.
  run-tests-on-startup: false

  # Beta features
  features:
    # That feature will you allow use tld. literal string for e.g.
    # @{userId: 1, products: [{id: {_i}, quantity: 1}, {id: {_j}, quantity: 2}]}
    # Inside the Literal string you don't need use a % for evaluate variables or expressions.
    # Also,you don't need to use string escape as like "", you can basically json string escape for e.g.
    # @{test: "This is \"New\" String"}
    # So the literal start always with @ and then continue a with a JSON
    literal-parsing-single-line: false

    # This Feature allows you to immediately get the value from the async run of the request.
    # For e.g.
    # function test(i: number) :: object:
    #    async make POST request to "https://dummyjson.com/carts/add":
    #        headers: @{Content-Type: "Application/json"}
    #        headers: json from text "{Content-Type: 'application/json'}"
    #        content: json from text "{userId: 1, products: [{id: %{_i}%, quantity: 1}, {id: 50, quantity: 2}]}"
    #        save incorrect response: true
    #        lenient: true
    #        save:
    #            content: {_content}
    #        on complete:
    #            return {_content}
    #
    # command test <number>:
    #    trigger:
    #        send test(arg-1)
    force-async-return: false

  # 0 - Basic debug mode
  # 1 - More verbose debug mode
  # 2 - All debug messages, also the request response.
  # 3 - All debug messages, also message from parsing
  # 4 - Dev mode
  logging-level: 1

  # Path variable delimiter
  # for example. `value "test::command" of {_json}`
  # Default value : "::"
  path-delimiter: "::"

  # The timeout for checking change in file in milliseconds.
  # Default value : 150
  watcher-interval: 150

  # Prefixes for logging, fully support hex and colors also unicodes
  # hex: &#00000
  # colors: Minecraft format (&b) - light blue
  prefixes:
    plugin: "&l&8[&#6efa6eS&#77d658k&#76b447J&#6e943as&#627531o&#51582an&8] &r"
    error: "&#bb0c19E&#b91826r&#b62131r&#b22a3bo&#ad3244r &r"
    watcher: "&l&#8e12e5J&#ca00bes&#ea0094o&#f9006dn&#fa0049W&#f23429a&#e25c00t&#ce7800c&#b78d00h&#9f9f00e&#86ad32r &r"
    request: "&#6efa9cR&#2de1a5e&#00c8a9q&#00aea6u&#00939ce&#00798bs&#1d6073t&#2a4858s &r"
    webhook: "&#fab36eW&#f0eb52e&#97e23ab&#38c92ch&#2fa05co&#2e7a70o&#2a4858k &r "