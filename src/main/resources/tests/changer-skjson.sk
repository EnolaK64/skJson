options:
	Cache_file: "plugins/SkJson/..tests/raw.json"
	test_raw: "00291_raw_test"

on script load:
	if json file {@Cache_file} does not exist:
		new json file {@Cache_file} with content "{}"
	link json file {@Cache_file} as "00291_raw_test"

local function tryChangeCached(d: string, s: sender):
	set value of json object "data" in (json "00291_raw_test") to "new data"
	set value of json object "array" in (json "00291_raw_test") to "[]"
	add false to json list "array" in (json "00291_raw_test")
	save json "00291_raw_test"
	set {_j} to json "00291_raw_test"
	if (json size of {_j} = 2):
		send "&7&lTEST --> &8[&6&l Cache &fsave/writing &8] &asuccesfully passed." to {_s}
	else:
		send "&7&lTEST --> &8[&6&l Cache &fsave/writing &8] &cFailed." to {_s}

local function jsonPayload() :: json:
    return json from text "[1, {'list': [true]}]"

local function jsonObjectPayload() :: json:
    return json from text "{data: {key: 'test key'}, list: [{inner: {}}]}"

local function testArrayListADD(json: json, d: string) :: boolean:
    add "[]" to json array in {_json}
    add swords to json array "2" in {_json}
    return true if "[1,{""list"":[true]},[{""=="":""org.bukkit.inventory.ItemStack"",""v"":3465,""type"":""WOODEN_SWORD""},{""=="":""org.bukkit.inventory.ItemStack"",""v"":3465,""type"":""STONE_SWORD""},{""=="":""org.bukkit.inventory.ItemStack"",""v"":3465,""type"":""GOLDEN_SWORD""},{""=="":""org.bukkit.inventory.ItemStack"",""v"":3465,""type"":""IRON_SWORD""},{""=="":""org.bukkit.inventory.ItemStack"",""v"":3465,""type"":""DIAMOND_SWORD""},{""=="":""org.bukkit.inventory.ItemStack"",""v"":3465,""type"":""NETHERITE_SWORD""}]]" is "%{_json}%"

local function testArrayListSET(json: json, d: string) :: boolean:
    add "[]" to json list "1%{_d}%list" in {_json}
    set value of json list "1%{_d}%list[2]" in {_json} to false
    add "Hello from string" to json list "1%{_d}%list[1]" in {_json}
    set value of json list "1%{_d}%list[1]" in {_json} to "{}"
    set value of json list "1%{_d}%list[1]%{_d}%data" in {_json} to "[]"
    set key of json list "1%{_d}%list[1]%{_d}%data" in {_json} to "test"
    return true if "[1,{""list"":[true,{""test"":[]},false]}]" is "%{_json}%"


local function testArrayListREMOVE(json: json, d: string) :: boolean:
    add "Hello true" to json list in {_json}
    remove values 1 and "Hello true" of json list from {_json}
    add "A" to json list in {_json}
    remove 2nd element of json list from {_json}
    add diamond sword to json list "0%{_d}%list" in {_json}
    add diamond axe to json list "0%{_d}%list" in {_json}
    remove diamond axe of json list "0%{_d}%list" from {_json}
    return true if "[{""list"":[true,{""=="":""org.bukkit.inventory.ItemStack"",""v"":3465,""type"":""DIAMOND_SWORD""}]}]" is "%{_json}%"


local function testObjectSET(json: json, d: string) :: boolean:
	# {data: {key: 'test key'}, list: [{inner: {}}]}
	set value of json object "data%{_d}%key" in {_json} to "new test key"
	set key of json object "data%{_d}%key" in {_json} to "test key"
	set value of json object "list[0]%{_d}%inner" in {_json} to false
	set key of json object "list[0]%{_d}%inner" in {_json} to "inner-false"
	set value of json object "data" in {_json} to false
	set key of json object "list" in {_json} to "array"
	set value of json object "this-a test-what i need to <>-_%{_d}%data" in {_json} to iron sword
	return true if "{""data"":false,""array"":[{""inner-false"":false}],""this-a test-what i need to <>-_"":{""data"":{""=="":""org.bukkit.inventory.ItemStack"",""v"":3465,""type"":""IRON_SWORD""}}}" is "%{_json}%"

local function testObjectREMOVE(json: json, d: string) :: boolean:
	# {data: {key: 'test key'}, list: [{inner: {}}]}
	remove key "inner" of json object "list[0]" from {_json}
	remove key "list" of json object from {_json}
	remove value "test key" of json object "data" from {_json}
	return true if "{""data"":{}}" is "%{_json}%"


local function testREMOVEALL(json: json, d: string) :: boolean:
	# {data: {key: 'test key'}, list: [{inner: {}}]}
	set value of json object "data%{_d}%key2" in {_json} to "new test key"
	set value of json object "data%{_d}%key3" in {_json} to "new test key"
	set value of json object "root-key" in {_json} to "new test key"
	remove all "new test key" of json object "data" from {_json}
	remove all "new test key" of json object from {_json}
	set value of json object "array[0]%{_d}%root" in {_json} to "new test key"
	remove all "new test key" of json list "array[0]" from {_json}
	# {'data':{'key':'test key'},'list':[{'inner':{}}],'array':[{}]}
	return true if "{""data"":{""key"":""test key""},""list"":[{""inner"":{}}],""array"":[{}]}" is "%{_json}%"


on script load:
	send "Running tests of changer! (Array,JsonObject) (SET/ADD/REMOVE/REMOVE ALL)"
	send "Skript 2.7.0 - beta 3 (&a tested &r)"
	set {_d} to skJsonGetDelimiter(false)

	set {_failed} to 0
	if testArrayListADD(jsonPayload(), {_d}) is true:
		send "&7&lTEST --> &8[&e&l Array &8] &fAdder &asuccesfully passed."
	else:
		send "&7&lTEST --> &8[&e&l Array &8] &fAdder &cFailed."
		add 1 to {_failed}

	if testArrayListSET(jsonPayload(), {_d}) is true:
		send "&7&lTEST --> &8[&e&l Array &8] &fSetter &asuccesfully passed."
	else:
		send "&7&lTEST --> &8[&e&l Array &8] &fSetter &cFailed."
		add 1 to {_failed}

	if testArrayListREMOVE(jsonPayload(), {_d}) is true:
		send "&7&lTEST --> &8[&e&l Array &8] &fRemover &asuccesfully passed."
	else:
		send "&7&lTEST --> &8[&e&l Array &8] &fRemover &cFailed."
		add 1 to {_failed}

	if testObjectSET(jsonObjectPayload(), {_d}) is true:
		send "&7&lTEST --> &8[&b&l Object &8] &fSetter &asuccesfully passed."
	else:
		send "&7&lTEST --> &8[&b&l Object &8] &fSetter &cFailed."
		add 1 to {_failed}

	if testObjectREMOVE(jsonObjectPayload(), {_d}) is true:
		send "&7&lTEST --> &8[&b&l Object &8] &fRemover &asuccesfully passed."
	else:
		send "&7&lTEST --> &8[&b&l Object &8] &fRemover &cFailed."
		add 1 to {_failed}

	if testREMOVEALL(jsonObjectPayload(), {_d}) is true:
		send "&7&lTEST --> &8[&b&l Object&7/&e&lArray &8] &fRemover(ALL) &asuccesfully passed."
	else:
		send "&7&lTEST --> &8[&b&l Object&7/&e&lArray &8] &fRemover(ALL) &cFailed."
		add 1 to {_failed}

	tryChangeCached(skJsonGetDelimiter(false), sender)

	if {_failed} is 0:
		send "&aAll test of changer was successfully."
	else:
		send "&cAny of test was failed.."